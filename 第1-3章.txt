多态：实际上就是把“做什么”和“谁去做”分离开来；把不变的地方隔离出来，把可变的部分封装起来。

封装的目的:是将信息隐藏。 封装数据，封装实现，封装类型，封装变化。“任何形式的封装”

23种设计模式分别被划分为：
   创造型模式 目的：封装的是创建对象的变化。
   结构型模式 目的：封装的是对象之间的组合关系。
   行为型模式 目的：封装的是对象的行为变化。

当我们想办法把程序中变化的部分封装好之后，剩下的即是稳定而可复用的部分了。

一、原型模式
□ 原型模式是通过克隆来创建对象的

□ 原型编程范型基本原则：
   1. 所有的数据都是对象。
   2. 要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它。 
   3. 对象会记住它的原型。
   4. 如果对象无法响应某个请求，它会把这个请求委托给它自己的原型。

□ JavaScript 中的根对象是 Object.prototype 对象
我们在 JavaScript 遇到的每个对象，实际上都是从 Object.prototype 对象克隆而来的，
Object.prototype 对象就是它们的原型。比如下面的 obj1 对象和 obj2 对象：
var obj1 = new Object(); //通过new运算符创建对象
var obj2 = {};
可以利用 ECMAScript 5 提供的 Object.getPrototypeOf 来查看这两个对象的原型：
console.log( Object.getPrototypeOf( obj1 ) === Object.prototype ); // 输出：true
console.log( Object.getPrototypeOf( obj2 ) === Object.prototype ); // 输出：true

□ 函数既可以作为普通函数被调用，也可以作为构造器被调用

□ 在 JavaScript 语言里，我们并不需要关心克隆的细节，因为这是引擎内部负责实现的。我
们所需要做的只是显式地调用 var obj1 = new Object()或者 var obj2 = {}。此时，引擎内部会从
Object.prototype 上面克隆一个对象出来，我们最终得到的就是这个对象。

□ 对于“对象把请求委托给它自己的原型”这句话，更好的说法是对象把请求委托给它的构造器的原型  

□ JavaScript 给对象提供了一个名为__proto__的隐藏属性，某个对象的__proto__属性默认会指
向它的构造器的原型对象，即{Constructor}.prototype。
var Plane = function(){ }//先定义一个构造函数，再通过new一个新的对象
var plane = new Plane();
console.log(plane.__proto__ == Plane.prototype);//true

□ 当对象 a 需要借用对象 b 的能力时，可以有选择性地把对象 a 的构造器的原型指向对象 b，从而达到继承的
效果。下面的代码是我们最常用的原型继承方式：
var obj = { name: 'sven' };
var A = function(){};
A.prototype = obj;
var a = new A();
console.log( a.name ); // 输出：sven
我们来看看执行这段代码的时候，引擎做了哪些事情。
   * 首先，尝试遍历对象 a 中的所有属性，但没有找到 name 这个属性。
   * 查找 name 属性的这个请求被委托给对象 a 的构造器的原型，它被 a.__proto__ 记录着并且
指向 A.prototype，而 A.prototype 被设置为对象 obj。
   * 在对象 obj 中找到了 name 属性，并返回它的值。

□ 当我们期望得到一个“类”继承自另外一个“类”的效果时，往往会用下面的代码来模拟实现：
var A = function(){};
A.prototype = { name: 'sven' };
var B = function(){};
B.prototype = new A();
var b = new B();
console.log( b.name ); // 输出：sven
再看这段代码执行的时候，引擎做了什么事情。
 * 首先，尝试遍历对象 b 中的所有属性，但没有找到 name 这个属性。
图灵社区会员 轩辕 专享 尊重版权
22 第 1 章 面向对象的 JavaScript
 * 查找 name 属性的请求被委托给对象 b 的构造器的原型，它被 b.__proto__ 记录着并且指向
B.prototype，而 B.prototype 被设置为一个通过 new A()创建出来的对象。
 * 在该对象中依然没有找到 name 属性，于是请求被继续委托给这个对象构造器的原型
A.prototype。
 * 在 A.prototype 中找到了 name 属性，并返回它的值。

□ 当我们期望得到一个“类”继承自另外一个“类”的效果时，往往会用下面的代码来模拟实现：
var A = function(){};
A.prototype = { name: 'sven' };
var B = function(){};
B.prototype = new A();
var b = new B();
console.log( b.name ); // 输出：sven
再看这段代码执行的时候，引擎做了什么事情。
 * 首先，尝试遍历对象 b 中的所有属性，但没有找到 name 这个属性。
 * 查找 name 属性的请求被委托给对象 b 的构造器的原型，它被 b.__proto__ 记录着并且指向
B.prototype，而 B.prototype 被设置为一个通过 new A()创建出来的对象。
 * 在该对象中依然没有找到 name 属性，于是请求被继续委托给这个对象构造器的原型
A.prototype。
 * 在 A.prototype 中找到了 name 属性，并返回它的值。

二、this、call 和 apply

□ this的指向：
     1. 作为对象的方法调用。
     2. 作为普通函数调用。
     3. 构造器调用。
     4. Function.prototype.call 或Function.prooype.apply调用

□ call和apply的区别：
   它们的作用一模一样，区别仅在于传入参数形式的不同。

□ JavaScript 的解释器并不会计较形参和实参在数量、类型以及顺序上的区别
当使用 call 或者 apply 的时候，如果我们传入的第一个参数为 null，函数体内的 this 会指
向默认的宿主对象，在浏览器中则是 window

□ apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下
标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传
递给被调用的函数：
var func = function( a, b, c ){
      alert ( [ a, b, c ] ); // 输出 [ 1, 2, 3 ]
};
func.apply( null, [ 1, 2, 3 ] ); 
call 是包装在 apply 上面的一颗语法糖，如果我们明确地知道函数接受多少个参数，而且想
一目了然地表达形参和实参的对应关系，那么也可以用 call 来传送参数。

□ call和apply的用途：
   1. 改变this指向。
   2. Function.prototype.bind 改变this指向。
   3. 借用其他对象的方法。

   ①  改变this指向。
	有时我们使用 call 或者 apply 的目的不在于指定 this 指向，而是另有用途，比如借用其
	他对象的方法。那么我们可以传入 null 来代替某个具体的对象：
	Math.max.apply( null, [ 1, 2, 5, 3, 4 ] ) // 输出：5 。
   ②Function.prototype.bind 改变this指向。
 	Function.prototype.bind = function( context ){
 	var self = this; // 保存原函数
   	 return function(){ // 返回一个新的函数
       			return self.apply( context, arguments ); // 执行新的函数的时候，会把之前传入的 

context// 当作新函数体内的 this
    		}
	};
	var obj = {
 		name: 'sven'
	};
	var func = function(){
 		alert ( this.name ); // 输出：sven
	}.bind( obj);
	func(); 
   ③ 借用其他对象的方法。
    * 借用方法的的第一种场景是“借用构造函数”。
	var A = function( name ){
 		this.name = name;
	};
	var B = function(){
		 A.apply( this, arguments );
	};
	B.prototype.getName = function(){
 		return this.name;
	};
	var b = new B( 'sven' );
	console.log( b.getName() ); // 输出： 'sven'     	
    * 借用方法的第二种运用场景是“Array.prototype.push”。
	比如想往 arguments 中添加一个新的元素，通常会借用
	Array.prototype.push：
	(function(){
 		Array.prototype.push.call( arguments, 3 );
 		console.log ( arguments ); // 输出[1,2,3]
	})( 1, 2 );
	在操作 arguments 的时候，我们经常非常频繁地找 Array.prototype 对象借用方法

三、闭包和高阶函数

□ 闭包：
* 变量的作用域：函数可以用来创造函数作用域，此时的函数就像是一辆轿车上贴了膜的玻璃， 在函数里
可以看到外面的变量，但外面看不见里面的变量。变量的搜索是从内到外非从外到内。
* 变量的生存周期：全局变量永久，函数内var关键字声明的局部变量，随着函数调用完（退出函数）就被销毁。
	var func = function(){ 
		var a = 1; 
	    return function(){ 
	        a++; 
	        alert ( a );     
		 } 
	}; 
	var f = func(); 
	f();  // 输出：2 

	跟我们之前的推论相反，当退出函数后，局部变量a并没有消失，而是似乎一直在某个地方存活着。
                这是因为当执行var f = func();时，f返回了一个匿名函数的引用，它可以访问到func()
	被调用时产生的环境，而局部变量a一直处在这个环境里。既然局部变量所在的环境还能被外界
	访问，这个局部变量就有了不被销毁的理由。在这里产生了一个闭包结构，局部变量的生命看起
	来被延续了。
	<html>
 	<body>
 		<div>1</div>
 		<div>2</div>
 		<div>3</div>
 		<div>4</div>
 		<div>5</div>
 	<script>
	 	var nodes = document.getElementsByTagName( 'div' );
	 	for ( var i = 0, len = nodes.length; i < len; i++ ){
	 		(function(i){
				nodes[ i ].onclick = function(){
	 				alert ( i );
	 			}
			})(i)
		 };
 	</script>
	 </body>
	</html>       在闭包的帮助下，把每次循环的 i 值都封闭起来。当在事件函数中顺着作用域链
中从内到外查找变量 i 时，会先找到被封闭在闭包环境中的 i，如果有 5 个 div，这里的 i 就分别
是 0,1,2,3,4

闭包通俗的讲就是，函数内的局部变量能够被外界函数访问就形成了闭包。


□ 闭包的更多作用：
 	1.封装变量 

 	var mult = function(){
	 	var a = 1;
	 	for ( var i = 0, l = arguments.length; i < l; i++ ){
		 	a = a * arguments[i];
	 	}
	 	return a;
	}; 

中括号运算符总是能代替点运算符。但点运算符却不一定能全部代替中括号运算符。
中括号运算符可以用字符串变量的内容作为属性名。点运算符不能。
中括号运算符可以用纯数字为属性名。点运算符不能。
中括号运算符可以用js的关键字和保留字作为属性名。点运算符不能。

提炼函数是代码重构中的一种常见技巧。如果在一个大函数中有一些代码块能够独立出来，
我们常常把这些代码块封装在独立的小函数里面。独立出来的小函数有助于代码复用，如果这些
小函数有一个良好的命名，它们本身也起到了注释的作用。如果这些小函数不需要在程序的其他
地方使用，最好是把它们用闭包封闭起来。代码如下：
	var mult = (function(){
		 var cache = {};
		 var calculate = function(){ // 封闭 calculate 函数
		 	var a = 1;
		 	for ( var i = 0, l = arguments.length; i < l; i++ ){
		 		a = a * arguments[i];
	 		}
		 	return a;
		 };
 		return function(){
		 	var args = Array.prototype.join.call( arguments, ',' );
		 	if ( args in cache ){
		 		return cache[ args ];
		 	}
		 	return cache[ args ] = calculate.apply( null, arguments );
		}
	})(); 


    2.延续局部变量的寿命


□ 闭包和面向对象设计

  * 用闭包实现一个完整的面向对象系统

  	var extend = function(){
      	var value = 0;
      	return {
	      	call:function{
	      		value++;
	      		console.log(value);
      		}
      	}
	  }

	var extend = extend();
	extend.call();//1

	* 面向对象写法
	var extend = {
		value:0,
		call:function(){
			this.value++;
			console.log(this.value);
		}
	}
	extend.call();//1

	或者：
	var extend = function(){
	  		this.value = 0;
	  	}
	  	extend.prototype.call = function(){
	  		this.value++;
	  		console.log(this.value);
	  	}

	var extend = new extend();


□ 闭包和高阶函数
  
  var Tv = {  //被执行着
    open:function(){
    	console.log('打开电视机');
    },
    close:function(){
    	console.log('关闭电视机');
    }
  }
  
  var OpenTvCommand = function(receiver){ //命名
  	this.receiver = receiver;
  }
  OpenTvCommand.prototype.execute = function(){
  	this.receiver.open();
  }

 OpenTvCommand.prototype.undo = function(){
    this.receiver.close();
  }

  var setCommand = function(command){
  	document.getElementById('execute').onclick = function(){
       command.execute();
  	}
  	document.getElementById('undo').onclick = function(){
  	   command.undo();
  	}
  }
  
  setCommand(new OpenTvCommand(Tv))

 *高阶函数
  1. 函数可作为参数被传递。
  2. 函数可以作为返回值被输出。

无论是将函数当作参数传递，还是让函数的执行结果返回另外一个函数，这两种情形都有很多应用场景

作为参数传递
第一个重要的情景就是作为回调函数使用

var appendDiv = function(callback) {
     for (var i = 0; i <50; i++) {
         var div = document.createElement('div');
         div.innerHTML=i+1;
         document.body.appendChild(div);
         if(typeof callback == 'function'){
         	callback(div);
         }
     }

 }
 appendDiv(function(node){
 	node.style.display = 'none';
 });

函数作为返回值输出

var isType = function( type ){ 
    return function( obj ){ 
        return Object.prototype.toString.call( obj ) === '[object '+ type +']'; 
    } 
}; 
var isString = isType( 'String' ); 
var isArray = isType( 'Array' ); 
var isNumber = isType( 'Number' ); 
console.log( isArray( [ 1, 2, 3 ] ) );  // 输出：true  

* 高阶函数实现AOP 
  AOP 面向切面编程：把一些跟核心业务逻辑模块无关的功能抽离出来，这些业务通常包括 日志统计、安全控制、异常处理等。把这些功能抽出来之后呢，在通过“动态织入”的方式掺入业务逻辑模块中。这样做的好处首先是可以保持业务逻辑模块的纯净和高内聚性，其次是可以很方便地复用日志统计等功能模块。

*高阶函数的其他应用

currying  函数柯里化  又称部分求值 

一个currying的函数首先会接受一些参数，接受了这些参数之后，
该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保存起来。待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值。

 var cost = (function() {
         var args = [];
         return function() {
             if (arguments.length === 0) {
                 var money = 0;
                 for (var i = 0; i < args.length; i++) {
                     money += args[i];
                 }
                 return money;
             } else {
                 [].push.apply(args, arguments);
                 console.log(args);
             }
         };
     })();
     cost(100);
     cost(200);
     cost();   
     console.log(cost()); 

* 函数节流 在一些少数情况下，函数的触发不是由用户直接控制的。在这些场景下，函数有可能被非常频繁地调用，而造成大的性能问题借助setTimeout来完成。
var throttle = function(){
	var _this = this,
		timer,
		firstTime = true;
		
	return function(){
		var _me = this,
			args = arguments;


		if(firstTime){
			_this.apply(_me, args);
			return firstTime = false;
		}
		if(timer){
			return false;
		}

		timer = function(){
			clearTimeOut(timer);
			timer = null;
			_this.apply(_me, args);
		}
	}
	
};
window.onreisze = throttle(function(){
	console.log(1);
},500);


*分时函数 （分页）
var timeChunk = function(ary, fn, count) {
         var obj,
             t;
         var len = ary.length;
         var start = function() {
             for (var i = 0; i < Math.min(count || 1, ary.length); i++) {
                 var obj = ary.shift();
                 fn(obj);
             }
         };
         return function(){
               var t = setInterval(function(){
                    if(ary.length == 0){
                         return clearInterval(t);
                    }

                    start();

               },200);
         }
     };

     var ary = [];
     for (var i = 1; i <= 10; i++) {
         ary.push(i);
     };
     var renderFriendList =timeChunk(ary, function(n){
          var div = document.createElement('div');
          div.innerHTML = n;
          document.body.appendChild(div);
     },8);
    
     renderFriendList();

 };

 *惰性函数  在Web开发中，因为浏览器之间的实现差异，一些嗅探工作总是不可避免。
 比如我们需要一个在各个浏览器中能够通用的事件绑定函数addEvent

     var addEvent = function( elem, type, handler ){ 
        if ( window.addEventListener ){ 
           addEvent = function( elem, type, handler ){ 
               elem.addEventListener( type, handler, false ); 
           } 
        }else if ( window.attachEvent ){ 
            addEvent = function( elem, type, handler ){ 
                elem.attachEvent( 'on' + type, handler ); 
            } 
        } 
        addEvent( elem, type, handler ); 
    }; 
      var div = document.getElementById( 'div1' ); 
      		addEvent( div, 'click', function(){ 
          	alert (1); 
      }); 
      
      addEvent( div, 'click', function(){ 
          alert (2); 
      }); 
