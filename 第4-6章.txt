四、单例模式
定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。

实现单例模式 : 用一个变量来标记当前是否已经为某个类创建过对象
如果是，则在下一次获取该类的实例时，直接返回之前创建的对象

□ 透明的单例模式
  我们将使用CreateDiv单例类，它的作用是负责在页面中创建唯一的div节点，代码如下
   var CreateDiv = (function(){
      var instance;
      var CreateDiv = function(html){
        if(instance){
          return instance;
        }
        this.html = html;
        this.init();
        return instance = this;
      }
      CreateDiv.prototype.init = function(){
        var div = document.createElement('div');
        div.innerHML = this.html;
        document.body.appendChild(div);

      };
      return CreateDiv;
   })();
   var a = new CreateDiv('sven1');
   var b = newCreateDiv('sven2');
   alert(a==b);//true

以上代码的缺点：
假设我们某天需要利用这个类，在页面中创建千千万万的div，即要让这个类从单例类变成一个普通的可产生多个实例的类，那我们必须得改写CreateDiv构造函数，把控制创建唯一对象的那一段去掉，这种修改会给我们带来不必要的烦恼

□ 用代理类实现单例模式

□ javascript 单例模式应用 ：核心：确保只有一个实例，并提供全局访问

全局变量不是单例模式，但在JavaScript开发中，我们经常会把全局变量当成单例来使用。 例如：var a = {}

*使用命名空间
var namespace1 = { 
    a: function(){ 
        alert (1); 
    }, 
    b: function(){ 
        alert (2); 
    } 
}; 

*使用闭包封装私有变量
var user = (function(){ 
    var __name = 'sven', 
        __age = 29; 
    return { 
        getUserInfo: function(){ 
            return __name + '-' + __age; 
        } 
    } 
})(); 

□ 惰性单例 : 在需要的时候才创建对象实例,惰性单例是单例模式的重点。

下面我们将以Web QQ的登录浮窗为例，介绍与全局变量结合实现惰性的单例。

* 第一种解决方案是在页面加载完成的时候便创建好这个div浮窗，这个浮窗一开始肯定是隐藏状态的，当用户点击登录按钮的时候，它才开始显示：
     var loginLayer = (function(){ 
        var div = document.createElement( 'div' ); 
        div.innerHTML = '我是登录浮窗'; 
        div.style.display = 'none'; 
        document.body.appendChild( div ); 
        return div; 
    })(); 
    document.getElementById( 'loginBtn' ).onclick = function(){ 
            loginLayer.style.display = 'block'; 
    }; 

缺点：也许我们进入WebQQ只是玩玩游戏或者看看天气，根本不需要进行
登录操作，登录浮窗总是一开始就被创建好，那么很有可能将白白浪费一些DOM节点
 
* 第二种用户点击登录按钮的时候才开始创建该浮窗
    var createLoginLayer = function(){ 
        var div = document.createElement( 'div' ); 
        div.innerHTML = '我是登录浮窗'; 
        div.style.display = 'none'; 
        document.body.appendChild( div ); 
        return div; 
    }; 
        document.getElementById( 'loginBtn' ).onclick = function(){ 
        var loginLayer = createLoginLayer(); 
        loginLayer.style.display = 'block'; 
    }; 
缺点：虽然现在达到了惰性的目的，但失去了单例的效果，当我们每次点击登录按钮的时候，都会创建一个新的登录浮窗div。虽然我们可以在点击浮窗上的关闭按钮时（此处未实现）把这个浮窗从页面中删除掉，但这样频繁地创建和删除节点明显是不合理的，也是不必要的。

*第三种用一个变量来判断是否已经创建过登录浮窗，这也是本节第一段代码中的做法：
    var createLoginLayer = (function(){ 
    var div; 
    return function(){ 
        if ( !div ){ 
            div = document.createElement( 'div' ); 
            div.innerHTML = '我是登录浮窗'; 
            div.style.display = 'none'; 
            document.body.appendChild( div ); 
        } 
        return div; 
    } 
})(); 
document.getElementById( 'loginBtn' ).onclick = function(){ 
    var loginLayer = createLoginLayer(); 
    loginLayer.style.display = 'block'; 
}; 
缺点： 这段代码仍然是违反单一职责原则的，创建对象和管理单例的逻辑都放在createLoginLayer对象内部。 如果下次我们需要创建页面唯一的iframe.或者script标签，用来跨域请求数据，就必须如法炮制，把createLoginLayer函数照抄一遍

□ 通用的惰性单例

改进第三种方法：管理单例的逻辑其实是完全可以抽象出来的，这个逻辑始终是一样的：用一个变量来标志是否创建过对象，如果是，则在下次直接返回这个已经创建好的对象。
现在我们就把如何管理单例的逻辑从原来的代码中抽离出来，这些逻辑被封装在getSingle函数内部，创建对象的方法fn被当成参数动态传入getSingle函数：
var getSingle = function(fn){  //不变的部分分离出来进行封装
    var result;
    return function(){
      return result || (result = fn.apply(this, arguments));
    }
}

var createLoginLayer = function(){
    var div = document.creatElement('div');
    div.innerHtml = '我是登录浮窗';
    document.body.appendChild(div);
    return div;
}

var createSingleLoginLayer = getSingle(createLoginLayer);

document.getElementById( 'loginBtn' ).onclick = function(){
    var loginLayer = createSingleLoginLayer();
    loginLayer.style.display = 'block';
};

在这个例子中，我们把创建实例对象的职责和管理单例的职责分别放置在两个方法里，这两个方法可以独立变化而互不影响，当它们连接在一起的时候，就完成了创建唯一实例对象的功能，看起来是一件挺奇妙的事情。

小结：单例模式是我们学习的第一个模式，我们先学习了传统的单例模式实现，也了解到因为语言的差异性，有更适合的方法在JavaScript中创建单例。这一章还提到了代理模式和单一职责原则，后面的章节会对它们进行更详细的讲解。在getSinge函数中，实际上也提到了闭包和高阶函数的概念。单例模式是一种简单但非常实用的模式，特别是惰性单例技术，在合适的时候才创建对象，并且只创建唯一的一个。更奇妙的是，创建对象和管理单例的职责被分布在两个不同的方法中，这两个方法组合起来才具有单例模式的威力。

五、策略模式
    定义：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。